{"mappings":"","sources":["js/cursorShenanigans.js"],"sourcesContent":["function fairyDustCursor(options) {\n    let possibleColors = (options && options.colors) || [\n      \"#FFFFFF\"\n    ];\n    let hasWrapperEl = options && options.element;\n    let element = hasWrapperEl || document.body;\n  \n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    let cursor = { x: width / 2, y: width / 2 };\n    let particles = [];\n    let canvas, context;\n  \n    let canvImages = [];\n    const char = \"+\";\n  \n    function init() {\n      \n      canvas = document.createElement(\"canvas\");\n      context = canvas.getContext(\"2d\");\n      canvas.style.top = \"0px\";\n      canvas.style.left = \"0px\";\n      canvas.style.pointerEvents = \"none\";\n  \n      if (hasWrapperEl) {\n        canvas.style.position = \"absolute\";\n        element.appendChild(canvas);\n        canvas.width = element.clientWidth;\n        canvas.height = element.clientHeight;\n      } else {\n        canvas.style.position = \"fixed\";\n        element.appendChild(canvas);\n        canvas.width = width;\n        canvas.height = height;\n      }\n  \n      context.font = \"21px serif\";\n      context.textBaseline = \"middle\";\n      context.textAlign = \"center\";\n  \n      possibleColors.forEach((color) => {\n        let measurements = context.measureText(char);\n        let bgCanvas = document.createElement(\"canvas\");\n        let bgContext = bgCanvas.getContext(\"2d\");\n  \n        bgCanvas.width = measurements.width;\n        bgCanvas.height =\n          measurements.actualBoundingBoxAscent +\n          measurements.actualBoundingBoxDescent;\n  \n        bgContext.fillStyle = color;\n        bgContext.textAlign = \"center\";\n        bgContext.font = \"21px serif\";\n        bgContext.textBaseline = \"middle\";\n        bgContext.fillText(\n          char,\n          bgCanvas.width / 2,\n          measurements.actualBoundingBoxAscent\n        );\n  \n        canvImages.push(bgCanvas);\n      });\n  \n      bindEvents();\n      loop();\n    }\n  \n    // Bind events that are needed\n    function bindEvents() {\n      element.addEventListener(\"mousemove\", onMouseMove);\n      element.addEventListener(\"touchmove\", onTouchMove);\n      element.addEventListener(\"touchstart\", onTouchMove);\n      window.addEventListener(\"resize\", onWindowResize);\n    }\n  \n    function onWindowResize(e) {\n      width = window.innerWidth;\n      height = window.innerHeight;\n  \n      if (hasWrapperEl) {\n        canvas.width = element.clientWidth;\n        canvas.height = element.clientHeight;\n      } else {\n        canvas.width = width;\n        canvas.height = height;\n      }\n    }\n  \n    function onTouchMove(e) {\n      if (e.touches.length > 0) {\n        for (let i = 0; i < e.touches.length; i++) {\n          addParticle(\n            e.touches[i].clientX,\n            e.touches[i].clientY,\n            canvImages[Math.floor(Math.random() * canvImages.length)]\n          );\n        }\n      }\n    }\n  \n    function onMouseMove(e) {\n      if (hasWrapperEl) {\n        const boundingRect = element.getBoundingClientRect();\n        cursor.x = e.clientX - boundingRect.left;\n        cursor.y = e.clientY - boundingRect.top;\n      } else {\n        cursor.x = e.clientX;\n        cursor.y = e.clientY;\n      }\n  \n      addParticle(\n        cursor.x,\n        cursor.y,\n        canvImages[Math.floor(Math.random() * possibleColors.length)]\n      );\n    }\n  \n    function addParticle(x, y, color) {\n      if( Math.floor(Math.random()*10) == 0){\n        particles.push(new Particle(x, y, color));\n      }\n    }\n  \n    function updateParticles() {\n      context.clearRect(0, 0, width, height);\n  \n      // Update\n      for (let i = 0; i < particles.length; i++) {\n        particles[i].update(context);\n      }\n  \n      // Remove dead particles\n      for (let i = particles.length - 1; i >= 0; i--) {\n        if (particles[i].lifeSpan < 0) {\n          particles.splice(i, 1);\n        }\n      }\n    }\n  \n    function loop() {\n      updateParticles();\n      requestAnimationFrame(loop);\n    }\n  \n    function Particle(x, y, canvasItem) {\n      const lifeSpan = Math.floor(Math.random() * 30 + 60);\n      this.initialLifeSpan = lifeSpan; //\n      this.lifeSpan = lifeSpan; //ms\n      this.velocity = {\n        x: (Math.random() < 0.5 ? -1 : 1) * (Math.random() / 2),\n        y: Math.random() * 0.7 + 0.9,\n      };\n      this.position = { x: x, y: y };\n      this.canv = canvasItem;\n  \n      this.update = function (context) {\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n        this.lifeSpan--;\n  \n        this.velocity.y += 0.02;\n  \n        const scale = Math.max(this.lifeSpan / this.initialLifeSpan, 0);\n  \n        context.drawImage(\n          this.canv,\n          this.position.x - (this.canv.width / 2) * scale,\n          this.position.y - this.canv.height / 2,\n          this.canv.width * scale,\n          this.canv.height * scale\n        );\n      };\n    }\n  \n    init();\n  }"],"names":[],"version":3,"file":"art.1e6a7e8b.js.map"}