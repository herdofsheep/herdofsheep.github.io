{"mappings":"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","sources":["<anon>","js/questionmark.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire7464\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire7464\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $cdewg = parcelRequire(\"cdewg\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nparcelRequire(\"f1q41\");\n\nvar $7lx9d = parcelRequire(\"7lx9d\");\nclass $0fe0c3d7bbbd0f45$var$QuestionMark extends (0, $cdewg.LitElement) {\n    static get properties() {\n        return {\n            container: {\n                type: Object\n            },\n            camera: {\n                type: Object\n            },\n            controls: {\n                type: Object\n            },\n            scene: {\n                type: Object\n            },\n            renderer: {\n                type: Object\n            },\n            que: {\n                type: Object\n            },\n            ques: {\n                type: Array\n            },\n            duplicated: {\n                tpye: Boolean\n            }\n        };\n    }\n    constructor(){\n        super();\n        this.duplicated = false;\n        this.init();\n        this.animate();\n    }\n    init() {\n        this.container = document.getElementById(\"container\");\n        this.scene = new $ilwiq.Scene();\n        this.scene.background = new $ilwiq.Color(0xffffff);\n        var width = this.container.clientWidth;\n        var height = this.container.clientHeight;\n        this.camera = new $ilwiq.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, -100, 1000);\n        var light = new $ilwiq.HemisphereLight(0x470b16, 100, 10);\n        light.position.set(0, 0, 10);\n        this.scene.add(light);\n        this.que = this.loadModel(\"/src/assets/models/gltf/questionmark.glb\");\n        this.queAll = new $ilwiq.Mesh();\n        this.renderer = new $ilwiq.WebGLRenderer({\n            antialias: true\n        });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(width, height);\n        this.renderer.gammaOutput = true;\n        this.container.appendChild(this.renderer.domElement);\n        window.addEventListener(\"resize\", this.onWindowResize.bind(this), false);\n    }\n    loadModel(url) {\n        var loader = new (0, $7lx9d.GLTFLoader)();\n        var model = new $ilwiq.Group;\n        loader.load(url, function(gltf) {\n            gltf.scene.traverse(function(child) {});\n            model.add(gltf.scene);\n        });\n        return model;\n    }\n    onWindowResize() {\n        var width = this.container.clientWidth;\n        var height = this.container.clientHeight;\n        this.camera.left = width / -2;\n        this.camera.right = width / 2;\n        this.camera.top = height / 2;\n        this.camera.bottom = height / -2;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(width, height);\n    }\n    animate() {\n        window.requestAnimationFrame(()=>this.animate());\n        if (this.duplicated == false) this.duplicate();\n        this.render();\n    }\n    render() {\n        var timer = Date.now() * 0.0005;\n        if (this.ques) for(let i = 0; i < this.ques.length; i++)this.ques[i].rotation.x = 3.14 * Math.cos(timer * 0.03 * (i + 100)) - 90;\n        this.renderer.render(this.scene, this.camera);\n        this.camera.lookAt(this.que.position);\n    }\n    duplicate() {\n        var found = _.get(this.que, [\n            \"children\",\n            0,\n            \"children\"\n        ], null);\n        if (found) {\n            var ques = [];\n            const matrix = new $ilwiq.Matrix4();\n            const quaternion = new $ilwiq.Quaternion();\n            var max = 14;\n            for(let i = 0; i < max; i++){\n                var peep = this.que.children[0].children.find((x)=>x.type == \"Mesh\").geometry.clone();\n                var offset = 50;\n                var offsetCalc = -offset * max / 2 + i * offset + max;\n                const position = new $ilwiq.Vector3(offsetCalc, 0, 5);\n                quaternion.setFromEuler(new $ilwiq.Euler(0, 0, 0));\n                var scaleSize = 5;\n                const scale = new $ilwiq.Vector3(scaleSize, scaleSize, scaleSize);\n                matrix.compose(position, quaternion, scale);\n                peep.applyMatrix4(matrix);\n                var mat = new $ilwiq.MeshStandardMaterial({\n                    color: 0xff0808\n                });\n                peep = new $ilwiq.Mesh(peep, mat);\n                ques.push(peep);\n            }\n            for(let i = 0; i < ques.length; i++)this.scene.add(ques[i]);\n            this.ques = ques;\n            this.duplicated = true;\n        }\n    }\n}\nwindow.customElements.define(\"question-mark\", $0fe0c3d7bbbd0f45$var$QuestionMark);\n\n\n//# sourceMappingURL=what.137651c3.js.map\n","import {LitElement, html} from 'lit-element';\nimport * as THREE from 'three';\nimport 'lodash';\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nclass QuestionMark extends LitElement {\n\n    static get properties() {\n        return {\n            container:{type: Object},\n            camera:{type: Object},\n            controls:{type: Object},\n            scene:{type: Object}, \n            renderer:{type: Object},\n            que:{type: Object},\n            ques:{type:Array},\n            duplicated:{tpye:Boolean}\n        };\n    }\n\n    constructor() {\n        super();\n        this.duplicated = false;\n        this.init();\n        this.animate();\n    }\n\n    init() {\n\n        this.container = document.getElementById( \"container\" );\n\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color( 0xffffff );\n\n        var width =this.container.clientWidth;\n        var height = this.container.clientHeight;\n\n        this.camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, -100, 1000 );\n\n        var light = new THREE.HemisphereLight( 0x470b16, 100, 10 );\n        light.position.set( 0, 0, 10 );\n        this.scene.add( light );\n\n        this.que = this.loadModel( '/src/assets/models/gltf/questionmark.glb' );\n        this.queAll = new THREE.Mesh();\n\n        this.renderer = new THREE.WebGLRenderer( { antialias: true } );\n        this.renderer.setPixelRatio( window.devicePixelRatio );\n        this.renderer.setSize( width, height );\n        this.renderer.gammaOutput = true;\n\n        this.container.appendChild( this.renderer.domElement );\n\n        window.addEventListener( 'resize', this.onWindowResize.bind(this), false );\n    }\n\n    loadModel( url ){\n        var loader = new GLTFLoader();\n        var model = new THREE.Group;\n\n        loader.load( url , function ( gltf ) {\n\n            gltf.scene.traverse( function ( child ) {});\n            model.add( gltf.scene );\n\n        } );\n\n        return model;\n\n    }\n\n    onWindowResize() {\n\n        var width = this.container.clientWidth;\n        var height = this.container.clientHeight;\n\n        this.camera.left   = width / - 2;\n        this.camera.right  =  width / 2;\n        this.camera.top   = height / 2;\n        this.camera.bottom   = height / - 2;\n        \n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize( width, height );\n    }\n\n    animate() {        \n        window.requestAnimationFrame( () => this.animate() );\n        if(this.duplicated == false){\n            this.duplicate();\n        }\n        this.render();\n    }\n\n    render() {\n        var timer = Date.now() * 0.0005;\n\n        if(this.ques){\n            for ( let i = 0; i < this.ques.length; i ++ ) {\n                this.ques[i].rotation.x = 3.14*Math.cos(timer*0.03*(i+100))-90;\n            }\n        }\n\n        this.renderer.render( this.scene, this.camera );\n        this.camera.lookAt( this.que.position );\n    }\n\n    duplicate() {\n        var found = _.get(this.que,['children',0,'children'],null)\n        if(found){\n\n            var ques = [];\n            const matrix = new THREE.Matrix4();\n            const quaternion = new THREE.Quaternion();\n\n            var max = 14\n            for ( let i = 0; i < max; i ++ ) {\n                \n                var peep = this.que.children[0].children.find(x=>x.type=='Mesh').geometry.clone();\n                \n                var offset = 50;\n                var offsetCalc = (-offset*max/2)+(i*offset)+max;\n                const position = new THREE.Vector3(offsetCalc,0,5);\n                quaternion.setFromEuler( new THREE.Euler(0,0,0) );\n                var scaleSize = 5;\n                const scale = new THREE.Vector3(scaleSize,scaleSize,scaleSize);\n\n                matrix.compose( position, quaternion, scale );\n          \n                peep.applyMatrix4( matrix );\n                var mat = new THREE.MeshStandardMaterial({ color: 0xff0808 });\n                peep = new THREE.Mesh( peep, mat )\n\n                ques.push(peep)\n            }\n\n            for ( let i = 0; i < ques.length; i ++ ) {\n                this.scene.add( ques[i] );\n            }\n            this.ques = ques;\n            this.duplicated = true;\n        }\n    }\n\n\n}\n\nwindow.customElements.define('question-mark', QuestionMark);"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$cdewg","$ilwiq","$7lx9d","$0fe0c3d7bbbd0f45$var$QuestionMark","LitElement","properties","container","type","Object","camera","controls","scene","renderer","que","ques","Array","duplicated","tpye","Boolean","constructor","animate","document","getElementById","Scene","background","Color","width","clientWidth","height","clientHeight","OrthographicCamera","light","HemisphereLight","position","set","add","loadModel","queAll","Mesh","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","gammaOutput","appendChild","domElement","addEventListener","onWindowResize","bind","url","loader","GLTFLoader","model","Group","load","gltf","traverse","child","left","right","top","bottom","updateProjectionMatrix","requestAnimationFrame","duplicate","render","timer","Date","now","i","length","rotation","x","Math","cos","lookAt","_","get","matrix","Matrix4","quaternion","Quaternion","peep","children","find","geometry","clone","offsetCalc","Vector3","setFromEuler","Euler","scale","compose","applyMatrix4","mat","MeshStandardMaterial","color","push","customElements","define"],"version":3,"file":"what.137651c3.js.map"}