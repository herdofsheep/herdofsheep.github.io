{"mappings":"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","sources":["js/cursorShenanigans.js"],"sourcesContent":["function fairyDustCursor(options) {\n    let possibleColors = (options && options.colors) || [\n      \"#FFFFFF\"\n    ];\n    let hasWrapperEl = options && options.element;\n    let element = hasWrapperEl || document.body;\n  \n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    let cursor = { x: width / 2, y: width / 2 };\n    let particles = [];\n    let canvas, context;\n  \n    let canvImages = [];\n    const char = \"+\";\n  \n    function init() {\n      \n      canvas = document.createElement(\"canvas\");\n      context = canvas.getContext(\"2d\");\n      canvas.style.top = \"0px\";\n      canvas.style.left = \"0px\";\n      canvas.style.pointerEvents = \"none\";\n  \n      if (hasWrapperEl) {\n        canvas.style.position = \"absolute\";\n        element.appendChild(canvas);\n        canvas.width = element.clientWidth;\n        canvas.height = element.clientHeight;\n      } else {\n        canvas.style.position = \"fixed\";\n        element.appendChild(canvas);\n        canvas.width = width;\n        canvas.height = height;\n      }\n  \n      context.font = \"21px serif\";\n      context.textBaseline = \"middle\";\n      context.textAlign = \"center\";\n  \n      possibleColors.forEach((color) => {\n        let measurements = context.measureText(char);\n        let bgCanvas = document.createElement(\"canvas\");\n        let bgContext = bgCanvas.getContext(\"2d\");\n  \n        bgCanvas.width = measurements.width;\n        bgCanvas.height =\n          measurements.actualBoundingBoxAscent +\n          measurements.actualBoundingBoxDescent;\n  \n        bgContext.fillStyle = color;\n        bgContext.textAlign = \"center\";\n        bgContext.font = \"21px serif\";\n        bgContext.textBaseline = \"middle\";\n        bgContext.fillText(\n          char,\n          bgCanvas.width / 2,\n          measurements.actualBoundingBoxAscent\n        );\n  \n        canvImages.push(bgCanvas);\n      });\n  \n      bindEvents();\n      loop();\n    }\n  \n    // Bind events that are needed\n    function bindEvents() {\n      element.addEventListener(\"mousemove\", onMouseMove);\n      element.addEventListener(\"touchmove\", onTouchMove);\n      element.addEventListener(\"touchstart\", onTouchMove);\n      window.addEventListener(\"resize\", onWindowResize);\n    }\n  \n    function onWindowResize(e) {\n      width = window.innerWidth;\n      height = window.innerHeight;\n  \n      if (hasWrapperEl) {\n        canvas.width = element.clientWidth;\n        canvas.height = element.clientHeight;\n      } else {\n        canvas.width = width;\n        canvas.height = height;\n      }\n    }\n  \n    function onTouchMove(e) {\n      if (e.touches.length > 0) {\n        for (let i = 0; i < e.touches.length; i++) {\n          addParticle(\n            e.touches[i].clientX,\n            e.touches[i].clientY,\n            canvImages[Math.floor(Math.random() * canvImages.length)]\n          );\n        }\n      }\n    }\n  \n    function onMouseMove(e) {\n      if (hasWrapperEl) {\n        const boundingRect = element.getBoundingClientRect();\n        cursor.x = e.clientX - boundingRect.left;\n        cursor.y = e.clientY - boundingRect.top;\n      } else {\n        cursor.x = e.clientX;\n        cursor.y = e.clientY;\n      }\n  \n      addParticle(\n        cursor.x,\n        cursor.y,\n        canvImages[Math.floor(Math.random() * possibleColors.length)]\n      );\n    }\n  \n    function addParticle(x, y, color) {\n      if( Math.floor(Math.random()*10) == 0){\n        particles.push(new Particle(x, y, color));\n      }\n    }\n  \n    function updateParticles() {\n      context.clearRect(0, 0, width, height);\n  \n      // Update\n      for (let i = 0; i < particles.length; i++) {\n        particles[i].update(context);\n      }\n  \n      // Remove dead particles\n      for (let i = particles.length - 1; i >= 0; i--) {\n        if (particles[i].lifeSpan < 0) {\n          particles.splice(i, 1);\n        }\n      }\n    }\n  \n    function loop() {\n      updateParticles();\n      requestAnimationFrame(loop);\n    }\n  \n    function Particle(x, y, canvasItem) {\n      const lifeSpan = Math.floor(Math.random() * 30 + 60);\n      this.initialLifeSpan = lifeSpan; //\n      this.lifeSpan = lifeSpan; //ms\n      this.velocity = {\n        x: (Math.random() < 0.5 ? -1 : 1) * (Math.random() / 2),\n        y: Math.random() * 0.7 + 0.9,\n      };\n      this.position = { x: x, y: y };\n      this.canv = canvasItem;\n  \n      this.update = function (context) {\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n        this.lifeSpan--;\n  \n        this.velocity.y += 0.02;\n  \n        const scale = Math.max(this.lifeSpan / this.initialLifeSpan, 0);\n  \n        context.drawImage(\n          this.canv,\n          this.position.x - (this.canv.width / 2) * scale,\n          this.position.y - this.canv.height / 2,\n          this.canv.width * scale,\n          this.canv.height * scale\n        );\n      };\n    }\n  \n    init();\n  }"],"names":[],"version":3,"file":"art.eedf5a3f.js.map","sourceRoot":"../../../"}